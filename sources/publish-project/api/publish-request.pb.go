// Code generated by protoc-gen-go. DO NOT EDIT.
// source: publish-request.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArtifactKind int32

const (
	ArtifactKind_CronJob    ArtifactKind = 0
	ArtifactKind_Deployment ArtifactKind = 1
)

var ArtifactKind_name = map[int32]string{
	0: "CronJob",
	1: "Deployment",
}

var ArtifactKind_value = map[string]int32{
	"CronJob":    0,
	"Deployment": 1,
}

func (x ArtifactKind) String() string {
	return proto.EnumName(ArtifactKind_name, int32(x))
}

func (ArtifactKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aaf3b270ba71444d, []int{0}
}

type Request struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Kind                 ArtifactKind `protobuf:"varint,3,opt,name=kind,proto3,enum=api.ArtifactKind" json:"kind,omitempty"`
	Tier                 string       `protobuf:"bytes,4,opt,name=tier,proto3" json:"tier,omitempty"`
	DockerContent        []byte       `protobuf:"bytes,5,opt,name=docker_content,json=dockerContent,proto3" json:"docker_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf3b270ba71444d, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Request) GetKind() ArtifactKind {
	if m != nil {
		return m.Kind
	}
	return ArtifactKind_CronJob
}

func (m *Request) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *Request) GetDockerContent() []byte {
	if m != nil {
		return m.DockerContent
	}
	return nil
}

type Response struct {
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Types that are valid to be assigned to ResponseVariants:
	//	*Response_ImageVersion
	//	*Response_ErrorDescription
	ResponseVariants     isResponse_ResponseVariants `protobuf_oneof:"response_variants"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf3b270ba71444d, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

type isResponse_ResponseVariants interface {
	isResponse_ResponseVariants()
}

type Response_ImageVersion struct {
	ImageVersion string `protobuf:"bytes,2,opt,name=image_version,json=imageVersion,proto3,oneof"`
}

type Response_ErrorDescription struct {
	ErrorDescription string `protobuf:"bytes,3,opt,name=error_description,json=errorDescription,proto3,oneof"`
}

func (*Response_ImageVersion) isResponse_ResponseVariants() {}

func (*Response_ErrorDescription) isResponse_ResponseVariants() {}

func (m *Response) GetResponseVariants() isResponse_ResponseVariants {
	if m != nil {
		return m.ResponseVariants
	}
	return nil
}

func (m *Response) GetImageVersion() string {
	if x, ok := m.GetResponseVariants().(*Response_ImageVersion); ok {
		return x.ImageVersion
	}
	return ""
}

func (m *Response) GetErrorDescription() string {
	if x, ok := m.GetResponseVariants().(*Response_ErrorDescription); ok {
		return x.ErrorDescription
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Response_ImageVersion)(nil),
		(*Response_ErrorDescription)(nil),
	}
}

func init() {
	proto.RegisterEnum("api.ArtifactKind", ArtifactKind_name, ArtifactKind_value)
	proto.RegisterType((*Request)(nil), "api.Request")
	proto.RegisterType((*Response)(nil), "api.Response")
}

func init() { proto.RegisterFile("publish-request.proto", fileDescriptor_aaf3b270ba71444d) }

var fileDescriptor_aaf3b270ba71444d = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0xbb, 0x5f, 0xfb, 0x59, 0x3b, 0xa6, 0xa1, 0x5d, 0x11, 0x82, 0x28, 0x94, 0x42, 0x21,
	0x28, 0xed, 0xa1, 0xde, 0xbc, 0x69, 0x7b, 0x10, 0x05, 0x91, 0x1c, 0xbc, 0x86, 0x6d, 0x32, 0xea,
	0xd2, 0x66, 0x77, 0x9d, 0xdd, 0x16, 0xfc, 0x1f, 0x5e, 0xfd, 0xaf, 0x92, 0xdd, 0x48, 0x7b, 0xca,
	0xe4, 0x79, 0x86, 0xc9, 0x9b, 0x19, 0x38, 0x33, 0xdb, 0xd5, 0x46, 0xda, 0x8f, 0x29, 0xe1, 0xe7,
	0x16, 0xad, 0x9b, 0x19, 0xd2, 0x4e, 0xf3, 0xb6, 0x30, 0x72, 0xfc, 0xc3, 0xa0, 0x9b, 0x05, 0xcc,
	0x39, 0x74, 0x94, 0xa8, 0x30, 0x61, 0x23, 0x96, 0xf6, 0x32, 0x5f, 0xf3, 0x0b, 0xe8, 0xd5, 0x4f,
	0x6b, 0x44, 0x81, 0xc9, 0x3f, 0x2f, 0xf6, 0x80, 0x4f, 0xa0, 0xb3, 0x96, 0xaa, 0x4c, 0xda, 0x23,
	0x96, 0xc6, 0xf3, 0xe1, 0x4c, 0x18, 0x39, 0xbb, 0x23, 0x27, 0xdf, 0x44, 0xe1, 0x9e, 0xa4, 0x2a,
	0x33, 0xaf, 0xeb, 0xc1, 0x4e, 0x22, 0x25, 0x9d, 0x30, 0xb8, 0xae, 0xf9, 0x04, 0xe2, 0x52, 0x17,
	0x6b, 0xa4, 0xbc, 0xd0, 0xca, 0xa1, 0x72, 0xc9, 0xff, 0x11, 0x4b, 0xa3, 0xac, 0x1f, 0xe8, 0x22,
	0xc0, 0xf1, 0x37, 0x83, 0xe3, 0x0c, 0xad, 0xd1, 0xca, 0x22, 0xbf, 0x04, 0x90, 0x95, 0x78, 0xc7,
	0xfc, 0x20, 0x66, 0xcf, 0x93, 0xe7, 0x3a, 0xeb, 0x04, 0xfa, 0x41, 0xef, 0x90, 0xac, 0xd4, 0x2a,
	0xe4, 0x7d, 0x68, 0x65, 0x91, 0xc7, 0xaf, 0x81, 0xf2, 0x29, 0x0c, 0x91, 0x48, 0x53, 0x5e, 0xa2,
	0x2d, 0x48, 0x1a, 0x57, 0xb7, 0xb6, 0x9b, 0xd6, 0x81, 0x57, 0xcb, 0xbd, 0xb9, 0x3f, 0x85, 0x21,
	0x35, 0x01, 0xf2, 0x9d, 0x20, 0x29, 0x94, 0xb3, 0x57, 0xd7, 0x10, 0x1d, 0xfe, 0x27, 0x3f, 0x81,
	0xee, 0x82, 0xb4, 0x7a, 0xd4, 0xab, 0x41, 0x8b, 0xc7, 0x00, 0x4b, 0x34, 0x1b, 0xfd, 0x55, 0xa1,
	0x72, 0x03, 0x36, 0xbf, 0x85, 0xf8, 0x25, 0x5c, 0xe0, 0x6f, 0xd3, 0x29, 0x74, 0x1b, 0xc2, 0x23,
	0xbf, 0xb4, 0x46, 0x9c, 0xf7, 0x9b, 0xb7, 0xf0, 0xbd, 0x71, 0x6b, 0x75, 0xe4, 0x6f, 0x75, 0xf3,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x90, 0x44, 0x51, 0xf8, 0xc4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublishRequestClient is the client API for PublishRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublishRequestClient interface {
	Publish(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type publishRequestClient struct {
	cc *grpc.ClientConn
}

func NewPublishRequestClient(cc *grpc.ClientConn) PublishRequestClient {
	return &publishRequestClient{cc}
}

func (c *publishRequestClient) Publish(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.PublishRequest/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishRequestServer is the server API for PublishRequest service.
type PublishRequestServer interface {
	Publish(context.Context, *Request) (*Response, error)
}

// UnimplementedPublishRequestServer can be embedded to have forward compatible implementations.
type UnimplementedPublishRequestServer struct {
}

func (*UnimplementedPublishRequestServer) Publish(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterPublishRequestServer(s *grpc.Server, srv PublishRequestServer) {
	s.RegisterService(&_PublishRequest_serviceDesc, srv)
}

func _PublishRequest_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishRequestServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublishRequest/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishRequestServer).Publish(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublishRequest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PublishRequest",
	HandlerType: (*PublishRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PublishRequest_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publish-request.proto",
}
